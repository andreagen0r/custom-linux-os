#!/bin/bash

set -e                  # Exit on error
set -o pipefail         # Exit on pipeline error
set -u                  # Treat unset variable as error


#*******************************************
# Setting Global Variables
#*******************************************
DISTRIB_ID="Spectrum"
DISTRIB_RELEASE=1.0
DISTRIB_CODENAME="XRay"
DISTRIB_DESCRIPTION="Spectrum 3 OS (24.04.3)"
DISTRIB_URL="https://vmisecurity.com"

PUBLISHER="Andr√© Luz"
PUBLISHER_EMAIL="andre.luz@vmis.com.br"

BASE_VERSION="focal"
BASE_MIRROR="http://archive.ubuntu.com/ubuntu/"


#*******************************************
# Don't touch this variables
#*******************************************
WORKDIR=$(pwd)
BUILD_DIR="${WORKDIR}/build"
TMP_DIR=$(mktemp -d)
CHROOT_DIR="${WORKDIR}/chroot"
EFI_DIR="EFI/ubuntu"
OUTPUT_DIR="${BUILD_DIR}/OUTPUT" # Where final ISO will be created

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" # Define current source directory

MOUNT_LIST=("dev" "dev/pts" "proc" "sys" "run")


#*******************************************
# Include basic scripts and fallback script
#*******************************************
# Include logging functions
source $SCRIPT_DIR/scripts/logging.sh

# Run fallback script on error
trap 'echo "Error detected, executing fallback script..."; ${SCRIPT_DIR}/scripts/error.sh ${CHROOT_DIR} ${TMP_DIR} "${MOUNT_LIST[@]}"; exit 1' ERR


if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root."
    exec sudo "$0" "$@"
fi

log_success "Running as root!"

#*******************************************
log_title "Informations"
#*******************************************
cat << EOF
 
 üì¶ Linux name              : $DISTRIB_ID
 üì¶ Codename                : $DISTRIB_CODENAME
 üë§ Publisher               : $PUBLISHER - $PUBLISHER_EMAIL
 üìÄ ISO Directory           : $OUTPUT_DIR

EOF

#*******************************************
log_title "Dependencies versions check"
#*******************************************
$SCRIPT_DIR/scripts/version_check.sh $BASE_VERSION


#*******************************************
log_title "Debootstrap"
#*******************************************

spinner() {
    local i=1
    local spin_chars="/-\|"
    printf "\r[  INFO   ] $@... %s" "${spin_chars:0:1}"

    while true; do
        printf "\r[  INFO   ] $@... %s" "${spin_chars:i++%4:1}"
        sleep 0.1
    done
}

if [[ ! -d $CHROOT_DIR ]]; then
    log_info "Getting $BASE_VERSION version"

    spinner "Executing debootstrap" &
    SPINNER_PID=$! # Capture spinner ID process

    if sudo debootstrap --arch=amd64 "$BASE_VERSION" "$CHROOT_DIR" "$BASE_MIRROR" \
    > /dev/null 2>/tmp/debootstrap.log; then
        kill $SPINNER_PID # Kill spinner process after debootstrap finishes
        log_success "Debootstrap finished"
    else
        kill $SPINNER_PID # Kill spinner process if debootstrap fails
        cat /tmp/debootstrap.log
        log_error "Debootstrap failed. Check /tmp/debootstrap.log for details."
        exit 1
    fi
else
    log_info "Chroot already exists, skipping debootstrap"
fi


#*******************************************
log_title "Creating directories"
#*******************************************
if [[ -d $BUILD_DIR ]]; then
    sudo rm -rf $BUILD_DIR
fi

set +u                  # Allows variables without a defined value, like brace expansion
# Directories used to autogenerated files
mkdir -p $TMP_DIR/{etc,tmp}
# Directories used to final build files
mkdir -p $BUILD_DIR/{casper,boot/grub}
mkdir -p $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID
mkdir -p $OUTPUT_DIR
set -u                  # Treat unset variable as error


#*******************************************
# Mount Bind filesystem
#*******************************************
$SCRIPT_DIR/scripts/mount.sh $CHROOT_DIR "${MOUNT_LIST[@]}"


#*******************************************
log_title "Creating template files"
#*******************************************
source $SCRIPT_DIR/scripts/templates.sh


#*******************************************
log_title "Copying configuration files from $WORKDIR/$BASE_VERSION"
#*******************************************
# Copying script to be executed inside chroot
cp ./scripts/chroot.sh $TMP_DIR/tmp/

# Auto generated files
sudo cp -r $TMP_DIR/. $CHROOT_DIR/
# sudo rsync -a --no-owner --no-group "$TMP_DIR/" "$CHROOT_DIR/"

# Static config base on current version like (noble, jammy, focal)
sudo cp -r $WORKDIR/$BASE_VERSION/fs/. $CHROOT_DIR/ 


#*******************************************
log_title "Enter into chroot"
#*******************************************
sudo chroot $CHROOT_DIR /tmp/chroot.sh


#*******************************************
# Unmount filesystem
#*******************************************
$SCRIPT_DIR/scripts/umount.sh $CHROOT_DIR "${MOUNT_LIST[@]}"


#*******************************************
log_title "Creating Grub fonts"
#*******************************************
grub-mkfont -s 16 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-16.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 18 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-18.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 24 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-24.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 32 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-32.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose


#*******************************************
log_title "Copying kernel files"
#*******************************************
sudo cp $CHROOT_DIR/boot/memtest86*.bin $BUILD_DIR/boot/

# Obtem a vers√£o mais recente se houver mais de uma vers√µa dispon√≠vel
VMLINUZ=$(ls -1t $CHROOT_DIR/boot/vmlinuz-* | head -n1)
INITRD=$(ls -1t $CHROOT_DIR/boot/initrd.img-* | head -n1)

sudo cp "$VMLINUZ" $BUILD_DIR/casper/vmlinuz
sudo cp "$INITRD"  $BUILD_DIR/casper/initrd


#*******************************************
log_title "Compressing the filesystem"
#*******************************************
sudo mksquashfs $CHROOT_DIR $BUILD_DIR/casper/filesystem.squashfs -comp xz -e boot -e dev -b 1M -noappend


#*******************************************
log_title "Creating manifest file"
#*******************************************
sudo chroot $CHROOT_DIR dpkg-query -W --showformat='${Package} ${Version}\n' > $BUILD_DIR/casper/filesystem.manifest
sudo touch $BUILD_DIR/ubuntu.ico


#*******************************************
log_title "Calculating the filesystem size"
#*******************************************
sudo du -sx --block-size=1 $CHROOT_DIR | cut -f1 > $BUILD_DIR/casper/filesystem.size


#*******************************************
log_title "Assembling GRUB UEFI files"
#*******************************************
cp -r "$CHROOT_DIR/usr/lib/grub/x86_64-efi" "$BUILD_DIR/EFI/ubuntu/"
cp -r "$WORKDIR/assets/bootloader/grub/themes/." "$BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/"


#*******************************************
log_title "Creating final ISO"
#*******************************************
# EFI
#*******************************************
source ./scripts/efi.sh


#*******************************************
log_title "2. Building Hybrid ISO with xorriso"
#*******************************************
ISO_NAME="$OUTPUT_DIR/$DISTRIB_ID-$DISTRIB_RELEASE-$(date +%F).iso"

# sudo xorriso -as mkisofs -o "$ISO_NAME" \
#   -volid "$DISTRIB_ID $DISTRIB_RELEASE" \
#   -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
#   -c isolinux/boot.cat \
#   -b isolinux/isolinux.bin \
#    -no-emul-boot -boot-load-size 4 -boot-info-table \
#   -eltorito-alt-boot \
#   -e boot/grub/efi.img \
#    -no-emul-boot \
#   -isohybrid-gpt-basdat \
#   "$BUILD_DIR"

ISO_VOLID="$DISTRIB_ID-$DISTRIB_RELEASE" # Define o Volume ID

sudo xorriso -as mkisofs -o "$ISO_NAME" \
  -volid "${ISO_VOLID:0:32}" \
  -isohybrid-gpt-basdat \
  -e boot/grub/efi.img \
  -no-emul-boot \
  "$BUILD_DIR"

log_success "Successfully created ISO: $ISO_NAME"


#*******************************************
log_title "Clean tmp directories"
#*******************************************
sudo rm -rf $TMP_DIR