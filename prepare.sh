#!/bin/bash

set -e                  # exit on error
set -o pipefail         # exit on pipeline error
set -u                  # treat unset variable as error

# Include logging functions
source ./scripts/logging.sh

#*******************************************
log_info "Setting Global Variables"
#*******************************************
export DISTRIB_ID="Spectrum"
export DISTRIB_RELEASE=1.0
export DISTRIB_CODENAME="XRay"
export DISTRIB_DESCRIPTION="Spectrum 3 OS (24.04.3)"
export DISTRIB_URL="https://vmisecurity.com"

export PUBLISHER="Andr√© Luz"
export PUBLISHER_EMAIL="andre.luz@vmis.com.br"

export BASE_VERSION="noble"
export BASE_MIRROR="http://archive.ubuntu.com/ubuntu/"

export WORKDIR=$(pwd)
export BUILD_DIR="${WORKDIR}/build"
export TMP_DIR=$(mktemp -d)
export CHROOT_DIR="${WORKDIR}/chroot"
export EFI_DIR="EFI/ubuntu"
export OUTPUT_DIR="${BUILD_DIR}/OUTPUT" # Where final ISO will be created

#*******************************************
log_info "Informations"
#*******************************************
cat << EOF
 ------------------------------------------
 üì¶ Linux name              : $DISTRIB_ID
 üì¶ Codename                : $DISTRIB_CODENAME
 üë§ Publisher               : $PUBLISHER - $PUBLISHER_EMAIL
 üìÄ ISO Directory           : $OUTPUT_DIR
 ------------------------------------------
EOF

#*******************************************
log_info "Versions check"
#*******************************************
source ./scripts/version_check.sh

#*******************************************
log_info "Debootstrap"
#*******************************************
if [[ ! -d $CHROOT_DIR ]]; then
    log_info "Getting $BASE_VERSION version"
    
    sudo debootstrap --arch amd64 $BASE_VERSION $CHROOT_DIR $BASE_MIRROR \
    > /dev/null 2>/tmp/error.log && log_success "Debootstrap finished" || \
    cat /tmp/error.log
fi

#*******************************************
log_info "Creating directories"
#*******************************************
if [[ -d $BUILD_DIR ]]; then
    sudo rm -rf $BUILD_DIR
fi

# Directories used to autogenerated files
mkdir -p "$TMP_DIR"/{etc,tmp}
# Directories used to final build files
mkdir -p $BUILD_DIR/{casper,boot/grub,isolinux}
mkdir -p $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID
mkdir -p $OUTPUT_DIR

#*******************************************
log_info "Mount filesystem"
#*******************************************
sudo mount --bind /dev $CHROOT_DIR/dev
sudo mount --bind /dev/pts $CHROOT_DIR/dev/pts
sudo mount --bind /proc $CHROOT_DIR/proc
sudo mount --bind /sys $CHROOT_DIR/sys
sudo mount --bind /run $CHROOT_DIR/run

#*******************************************
log_info "Creating template files"
#*******************************************
source ./scripts/templates.sh

grub-mkfont -s 16 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-16.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 18 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-18.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 24 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-24.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose
grub-mkfont -s 32 -o $BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/DejaVuSans-32.pf2 $CHROOT_DIR/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf --verbose

#*******************************************
log_info "Copying configuration files from $WORKDIR/$BASE_VERSION"
#*******************************************
# Copying script to be executed inside chroot
cp ./scripts/chroot.sh $TMP_DIR/tmp/

# Auto generated files
sudo cp -r $TMP_DIR/. $CHROOT_DIR/
# Static config base on current version like (noble, jammy, focal)
sudo cp -r $WORKDIR/$BASE_VERSION/. $CHROOT_DIR/ 


#*******************************************
log_info "Enter into chroot"
#*******************************************
sudo chroot $CHROOT_DIR /tmp/chroot.sh

#*******************************************
log_info "Unmount filesystem"
#*******************************************
for dir in run sys proc dev/pts dev; do
    sudo umount -l $CHROOT_DIR/$dir || true
done

#*******************************************
log_info "Copying kernel files"
#*******************************************
sudo cp $CHROOT_DIR/boot/memtest86+x64.bin $BUILD_DIR/boot/

# Obtem a vers√£o mais recente se houver mais de uma vers√µa dispon√≠vel
VMLINUZ=$(ls -1t $CHROOT_DIR/boot/vmlinuz-* | head -n1)
INITRD=$(ls -1t $CHROOT_DIR/boot/initrd.img-* | head -n1)

sudo cp "$VMLINUZ" $BUILD_DIR/casper/vmlinuz
sudo cp "$INITRD"  $BUILD_DIR/casper/initrd

#*******************************************
log_info "Copying ISOLINUX files"
#*******************************************
sudo cp $CHROOT_DIR/usr/lib/ISOLINUX/isolinux.bin "$BUILD_DIR/isolinux/"
sudo cp $CHROOT_DIR/usr/lib/syslinux/modules/bios/ldlinux.c32 "$BUILD_DIR/isolinux/"

#*******************************************
log_info "Compressing the filesystem"
#*******************************************
sudo mksquashfs $CHROOT_DIR $BUILD_DIR/casper/filesystem.squashfs -comp xz -e boot -e dev -b 1M -noappend

#*******************************************
log_info "Creating manifest file"
#*******************************************
sudo chroot $CHROOT_DIR dpkg-query -W --showformat='${Package} ${Version}\n' > $BUILD_DIR/casper/filesystem.manifest
sudo touch $BUILD_DIR/ubuntu.ico

#*******************************************
log_info "Calculating the filesystem size"
#*******************************************
sudo du -sx --block-size=1 $CHROOT_DIR | cut -f1 > $BUILD_DIR/casper/filesystem.size


#*******************************************
log_info "Assembling GRUB UEFI files"
#*******************************************
cp -r "$CHROOT_DIR/usr/lib/grub/x86_64-efi" "$BUILD_DIR/EFI/ubuntu/"
cp -r "$WORKDIR/assets/bootloader/grub/themes/." "$BUILD_DIR/$EFI_DIR/themes/$DISTRIB_ID/"


#*******************************************
log_info "Creating final ISO"
#*******************************************
# EFI
#*******************************************
EFI_IMG_FILE=$BUILD_DIR/boot/grub/efi.img
source ./scripts/efi.sh

MOUNT_POINT=$(mktemp -d)
sudo mount -o loop $EFI_IMG_FILE $MOUNT_POINT

sudo mkdir -p $MOUNT_POINT/EFI/BOOT

sudo cp $CHROOT_DIR/usr/lib/shim/shimx64.efi $MOUNT_POINT/EFI/BOOT/bootx64.efi
sudo cp $CHROOT_DIR/usr/lib/shim/mmx64.efi $MOUNT_POINT/EFI/BOOT/
sudo cp $CHROOT_DIR/usr/lib/grub/x86_64-efi/monolithic/grubx64.efi $MOUNT_POINT/EFI/BOOT/

# Desmonta a imagem
sudo umount $MOUNT_POINT
sudo rm -rf $MOUNT_POINT

#*******************************************
log_info "2. Building Hybrid ISO with xorriso"
#*******************************************
ISO_NAME="$OUTPUT_DIR/$DISTRIB_ID-$DISTRIB_RELEASE-$(date +%F).iso"

sudo xorriso -as mkisofs -o "$ISO_NAME" \
  -volid "$DISTRIB_ID $DISTRIB_RELEASE" \
  -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
  -c isolinux/boot.cat \
  -b isolinux/isolinux.bin \
   -no-emul-boot -boot-load-size 4 -boot-info-table \
  -eltorito-alt-boot \
  -e boot/grub/efi.img \
   -no-emul-boot \
  -isohybrid-gpt-basdat \
  "$BUILD_DIR"

log_success "Successfully created ISO: $ISO_NAME"

#*******************************************
log_info "Clean tmp directories"
#*******************************************
sudo rm -rf $TMP_DIR